{"version":3,"file":"DownloadedUpdateHelper.js","sourceRoot":"","sources":["../src/DownloadedUpdateHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import { UpdateInfo } from \"builder-util-runtime\"\nimport { createHash } from \"crypto\"\nimport { createReadStream } from \"fs\"\nimport isEqual from \"lodash.isequal\"\nimport { Logger, ResolvedUpdateFileInfo } from \"./main\"\nimport { pathExists } from \"fs-extra-p\"\n\n/** @private **/\nexport class DownloadedUpdateHelper {\n  private _file: string | null = null\n  private _packageFile: string | null = null\n\n  private versionInfo: UpdateInfo | null = null\n  private fileInfo: ResolvedUpdateFileInfo | null = null\n\n  constructor(readonly cacheDir: string) {\n  }\n\n  get file() {\n    return this._file\n  }\n\n  get packageFile() {\n    return this._packageFile\n  }\n\n  async validateDownloadedPath(updateFile: string, versionInfo: UpdateInfo, fileInfo: ResolvedUpdateFileInfo, logger: Logger): Promise<boolean> {\n    if (this.versionInfo != null && this.file === updateFile) {\n      // update has already been downloaded from this running instance\n      // check here only existence, not checksum\n      return isEqual(this.versionInfo, versionInfo) && isEqual(this.fileInfo, fileInfo) && (await pathExists(updateFile))\n    }\n\n    // update has already been downloaded from some previous app launch\n    if (await DownloadedUpdateHelper.isUpdateValid(updateFile, fileInfo, logger)) {\n      logger.info(`Update has already been downloaded ${updateFile}).`)\n      return true\n    }\n\n    return false\n  }\n\n  setDownloadedFile(downloadedFile: string, packageFile: string | null, versionInfo: UpdateInfo, fileInfo: ResolvedUpdateFileInfo) {\n    this._file = downloadedFile\n    this._packageFile = packageFile\n    this.versionInfo = versionInfo\n    this.fileInfo = fileInfo\n  }\n\n  clear() {\n    this._file = null\n    this.versionInfo = null\n    this.fileInfo = null\n  }\n\n  private static async isUpdateValid(updateFile: string, fileInfo: ResolvedUpdateFileInfo, logger: Logger): Promise<boolean> {\n    if (!(await pathExists(updateFile))) {\n      logger.info(\"No cached update available\")\n      return false\n    }\n\n    const sha512 = await hashFile(updateFile)\n    if (fileInfo.info.sha512 !== sha512) {\n      logger.warn(`Sha512 checksum doesn't match the latest available update. New update must be downloaded. Cached: ${sha512}, expected: ${fileInfo.info.sha512}`)\n      return false\n    }\n    return true\n  }\n}\n\nfunction hashFile(file: string, algorithm: string = \"sha512\", encoding: \"base64\" | \"hex\" = \"base64\", options?: any) {\n  return new Promise<string>((resolve, reject) => {\n    const hash = createHash(algorithm)\n    hash\n      .on(\"error\", reject)\n      .setEncoding(encoding)\n\n    createReadStream(file, {...options, highWaterMark: 1024 * 1024 /* better to use more memory but hash faster */})\n      .on(\"error\", reject)\n      .on(\"end\", () => {\n        hash.end()\n        resolve(hash.read() as string)\n      })\n      .pipe(hash, {end: false})\n  })\n}"]}
