{"version":3,"file":"BaseUpdater.js","sourceRoot":"","sources":["../src/BaseUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { UpdateInfo, AllPublishOptions, CancellationError, DownloadOptions } from \"builder-util-runtime\"\nimport { ensureDir, rename, unlink } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { AppUpdater } from \"./AppUpdater\"\nimport { DOWNLOAD_PROGRESS, ResolvedUpdateFileInfo, UPDATE_DOWNLOADED } from \"./main\"\n\nexport abstract class BaseUpdater extends AppUpdater {\n  protected quitAndInstallCalled = false\n  private quitHandlerAdded = false\n\n  protected constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  async quitAndInstall(isSilent: boolean = false, isForceRunAfter: boolean = false): Promise<void> {\n    this._logger.info(`Install on explicit quitAndInstall`)\n    const isInstalled = await this.install(isSilent, isSilent ? isForceRunAfter : true)\n    if (isInstalled) {\n      setImmediate(() => {\n        if (this.app.quit !== undefined) {\n          this.app.quit()\n        }\n        this.quitAndInstallCalled = false\n      })\n    }\n  }\n\n  protected async executeDownload(taskOptions: DownloadExecutorTask): Promise<Array<string>> {\n    if (this.listenerCount(DOWNLOAD_PROGRESS) > 0) {\n      taskOptions.downloadOptions.onProgress = it => this.emit(DOWNLOAD_PROGRESS, it)\n    }\n\n    const updateInfo = taskOptions.updateInfo\n    const version = updateInfo.version\n    const fileInfo = taskOptions.fileInfo\n    const packageInfo = fileInfo.packageInfo\n\n    const cacheDir = this.downloadedUpdateHelper.cacheDir\n    await ensureDir(cacheDir)\n    const updateFileName = `installer-${version}.${taskOptions.fileExtension}`\n    const updateFile = path.join(cacheDir, updateFileName)\n    const packageFile = packageInfo == null ? null : path.join(cacheDir, `package-${version}.${path.extname(packageInfo.path) || \"7z\"}`)\n\n    const done = () => {\n      this.downloadedUpdateHelper.setDownloadedFile(updateFile, packageFile, updateInfo, fileInfo)\n      this.addQuitHandler()\n      this.emit(UPDATE_DOWNLOADED, updateInfo)\n      return packageFile == null ? [updateFile] : [updateFile, packageFile]\n    }\n\n    const log = this._logger\n    if (await this.downloadedUpdateHelper.validateDownloadedPath(updateFile, updateInfo, fileInfo, log)) {\n      return done()\n    }\n\n    const removeFileIfAny = () => {\n      this.downloadedUpdateHelper.clear()\n      return unlink(updateFile)\n        .catch(() => {\n          // ignored\n        })\n    }\n\n    // https://github.com/electron-userland/electron-builder/pull/2474#issuecomment-366481912\n    let nameCounter = 0\n    let tempUpdateFile = path.join(cacheDir, `temp-${updateFileName}`)\n    for (let i = 0; i < 3; i++) {\n      try {\n        await unlink(tempUpdateFile)\n      }\n      catch (e) {\n        if (e.code === \"ENOENT\") {\n          break\n        }\n\n        log.warn(`Error on remove temp update file: ${e}`)\n        tempUpdateFile = path.join(cacheDir, `temp-${nameCounter++}-${updateFileName}`)\n      }\n    }\n\n    try {\n      await taskOptions.task(tempUpdateFile, packageFile, removeFileIfAny)\n      await rename(tempUpdateFile, updateFile)\n    }\n    catch (e) {\n      await removeFileIfAny()\n\n      if (e instanceof CancellationError) {\n        log.info(\"Cancelled\")\n        this.emit(\"update-cancelled\", updateInfo)\n      }\n      throw e\n    }\n\n    log.info(`New version ${version} has been downloaded to ${updateFile}`)\n    return done()\n  }\n\n  protected abstract doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean\n\n  protected async install(isSilent: boolean, isRunAfter: boolean): Promise<boolean> {\n    if (this.quitAndInstallCalled) {\n      this._logger.warn(\"install call ignored: quitAndInstallCalled is set to true\")\n      return false\n    }\n\n    const installerPath = this.downloadedUpdateHelper.file\n    // todo check (for now it is ok to no check as before, cached (from previous launch) update file checked in any case)\n    // const isValid = await this.isUpdateValid(installerPath)\n    if (installerPath == null) {\n      this.dispatchError(new Error(\"No valid update available, can't quit and install\"))\n      return false\n    }\n\n    // prevent calling several times\n    this.quitAndInstallCalled = true\n\n    try {\n      this._logger.info(`Install: isSilent: ${isSilent}, isRunAfter: ${isRunAfter}`)\n      return this.doInstall(installerPath, isSilent, isRunAfter)\n    }\n    catch (e) {\n      this.dispatchError(e)\n      return false\n    }\n  }\n\n  protected addQuitHandler() {\n    if (this.quitHandlerAdded || !this.autoInstallOnAppQuit) {\n      return\n    }\n\n    this.quitHandlerAdded = true\n\n    this.app.once(\"quit\", async () => {\n      if (!this.quitAndInstallCalled) {\n        this._logger.info(\"Auto install update on quit\")\n        await this.install(true, false)\n      }\n    })\n  }\n}\n\nexport interface DownloadExecutorTask {\n  readonly fileExtension: string\n  readonly downloadOptions: DownloadOptions\n  readonly fileInfo: ResolvedUpdateFileInfo\n  readonly updateInfo: UpdateInfo\n  readonly task: (destinationFile: string, packageFile: string | null, removeTempDirIfAny: () => Promise<any>) => Promise<any>\n}"]}
