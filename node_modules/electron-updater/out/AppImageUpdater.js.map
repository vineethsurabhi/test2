{"version":3,"file":"AppImageUpdater.js","sourceRoot":"","sources":["../src/AppImageUpdater.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllPublishOptions, CancellationToken, DownloadOptions, newError, UpdateInfo } from \"builder-util-runtime\"\nimport { execFileSync, spawn } from \"child_process\"\nimport isDev from \"electron-is-dev\"\nimport { chmod, unlinkSync } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport \"source-map-support/register\"\nimport { BaseUpdater } from \"./BaseUpdater\"\nimport { FileWithEmbeddedBlockMapDifferentialDownloader } from \"./differentialDownloader/FileWithEmbeddedBlockMapDifferentialDownloader\"\nimport { UpdateCheckResult } from \"./main\"\nimport { findFile } from \"./Provider\"\n\nexport class AppImageUpdater extends BaseUpdater {\n  constructor(options?: AllPublishOptions | null, app?: any) {\n    super(options, app)\n  }\n\n  checkForUpdatesAndNotify(): Promise<UpdateCheckResult | null> {\n    if (isDev) {\n      return Promise.resolve(null)\n    }\n\n    if (process.env.APPIMAGE == null) {\n      if (process.env.SNAP == null) {\n        this._logger.warn(\"APPIMAGE env is not defined, current application is not an AppImage\")\n      }\n      else {\n        this._logger.info(\"SNAP env is defined, updater is disabled\")\n      }\n      return Promise.resolve(null)\n    }\n\n    return super.checkForUpdatesAndNotify()\n  }\n\n  /*** @private */\n  protected async doDownloadUpdate(updateInfo: UpdateInfo, cancellationToken: CancellationToken): Promise<Array<string>> {\n    const provider = await this.provider\n    const fileInfo = findFile(provider.resolveFiles(updateInfo), \"AppImage\")!!\n\n    const requestHeaders = await this.computeRequestHeaders()\n    const downloadOptions: DownloadOptions = {\n      skipDirCreation: true,\n      headers: requestHeaders,\n      cancellationToken,\n      sha512: fileInfo.info.sha512,\n    }\n\n    return await this.executeDownload({\n      fileExtension: \"AppImage\",\n      downloadOptions,\n      fileInfo,\n      updateInfo,\n      task: async updateFile => {\n        const oldFile = process.env.APPIMAGE!!\n        if (oldFile == null) {\n          throw newError(\"APPIMAGE env is not defined\", \"ERR_UPDATER_OLD_FILE_NOT_FOUND\")\n        }\n\n        let isDownloadFull = false\n        try {\n          await new FileWithEmbeddedBlockMapDifferentialDownloader(fileInfo.info, this.httpExecutor, {\n            newUrl: fileInfo.url.href,\n            oldFile,\n            logger: this._logger,\n            newFile: updateFile,\n            useMultipleRangeRequest: provider.useMultipleRangeRequest,\n            requestHeaders,\n          })\n            .download()\n        }\n        catch (e) {\n          this._logger.error(`Cannot download differentially, fallback to full download: ${e.stack || e}`)\n          // during test (developer machine mac) we must throw error\n          isDownloadFull = process.platform === \"linux\"\n        }\n\n        if (isDownloadFull) {\n          await this.httpExecutor.download(fileInfo.url.href, updateFile, downloadOptions)\n        }\n\n        await chmod(updateFile, 0o755)\n      },\n    })\n  }\n\n  protected doInstall(installerPath: string, isSilent: boolean, isRunAfter: boolean): boolean {\n    const appImageFile = process.env.APPIMAGE!!\n    if (appImageFile == null) {\n      throw newError(\"APPIMAGE env is not defined\", \"ERR_UPDATER_OLD_FILE_NOT_FOUND\")\n    }\n\n    // https://stackoverflow.com/a/1712051/1910191\n    unlinkSync(appImageFile)\n\n    let destination: string\n    if (path.basename(installerPath) === path.basename(appImageFile)) {\n      // no version in the file name, overwrite existing\n      destination = appImageFile\n    }\n    else {\n      destination = path.join(path.dirname(appImageFile), path.basename(installerPath))\n    }\n\n    execFileSync(\"mv\", [\"-f\", installerPath, destination])\n\n    const env: any = {\n      ...process.env,\n      APPIMAGE_SILENT_INSTALL: \"true\",\n    }\n\n    if (isRunAfter) {\n      spawn(destination, [], {\n        detached: true,\n        stdio: \"ignore\",\n        env,\n      })\n        .unref()\n    }\n    else {\n      env.APPIMAGE_EXIT_AFTER_INSTALL = \"true\"\n      execFileSync(destination, [], {env})\n    }\n    return true\n  }\n}"]}
